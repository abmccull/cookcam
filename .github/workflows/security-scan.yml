name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        project:
          - backend/api
          - mobile/CookCam
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Run npm audit
        working-directory: ${{ matrix.project }}
        run: |
          npm audit --audit-level=moderate || echo "Vulnerabilities found"
        continue-on-error: true

      - name: Run Snyk scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=${{ matrix.project }}/package.json

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/typescript

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  docker-security-scan:
    name: Docker Image Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          if [ -f "backend/api/Dockerfile" ]; then
            docker build -t cookcam-api:test backend/api
          else
            echo "No Dockerfile found, skipping"
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cookcam-api:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Check backend licenses
        working-directory: backend/api
        run: |
          npx license-checker --summary || echo "License check complete"

      - name: Check mobile licenses
        working-directory: mobile/CookCam
        run: |
          npx license-checker --summary || echo "License check complete"

  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Check security headers
        run: |
          echo "Checking security headers..."
          # Add actual header checks when site is live
          # curl -I https://api.cookcam.app | grep -i "x-frame-options\|x-content-type-options\|strict-transport-security"
          echo "Security headers check complete"

  sql-injection-scan:
    name: SQL Injection Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan for SQL injection vulnerabilities
        run: |
          echo "Scanning for potential SQL injection patterns..."
          # Check for string concatenation in SQL
          grep -r "query.*+.*req\." backend/api/src --include="*.ts" && echo "⚠️ Potential SQL injection found" || echo "✅ No obvious SQL injection patterns"
          # Check for template literal SQL with variables
          grep -r 'query.*`.*\${' backend/api/src --include="*.ts" && echo "⚠️ Potential SQL injection in template literals" || echo "✅ No template literal SQL injection"

  api-security-test:
    name: API Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-api-scan@v0.4.0
        with:
          target: 'https://staging-api.cookcam.app'
          format: 'json'
          cmd_options: '-a'
        continue-on-error: true

  compliance-check:
    name: Compliance & Best Practices
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for PII handling
        run: |
          echo "Checking PII handling patterns..."
          # Check for proper PII scrubbing in logs
          grep -r "email\|password\|ssn\|credit.*card" backend/api/src --include="*.ts" | grep -v "REDACTED\|scrub\|sanitize" && echo "⚠️ Potential PII logging" || echo "✅ PII appears to be handled correctly"

      - name: Check for hardcoded credentials
        run: |
          echo "Checking for hardcoded credentials..."
          grep -rE "(password|secret|api[_-]?key|token)[\"']?\s*[:=]\s*[\"'][^\"']+[\"']" backend/api/src --include="*.ts" | grep -v "process.env\|config\|REDACTED" && echo "⚠️ Potential hardcoded credentials" || echo "✅ No hardcoded credentials found"

      - name: GDPR compliance check
        run: |
          echo "Checking GDPR compliance indicators..."
          # Check for data deletion endpoints
          grep -r "DELETE.*user\|deleteUser\|removeUser" backend/api/src --include="*.ts" && echo "✅ User deletion endpoints found" || echo "⚠️ No user deletion endpoints"
          # Check for data export
          grep -r "export.*data\|downloadData" backend/api/src --include="*.ts" && echo "✅ Data export functionality found" || echo "⚠️ No data export functionality"

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, license-compliance, sql-injection-scan, compliance-check]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dependency scan: Complete" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code security analysis: Complete" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ License compliance: Complete" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SQL injection scan: Complete" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Compliance check: Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Review the individual job outputs for details." >> $GITHUB_STEP_SUMMARY

