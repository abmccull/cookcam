name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_call:

env:
  NODE_VERSION: '18.x'

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/api/package-lock.json
          
      - name: Install dependencies
        working-directory: backend/api
        run: npm ci
        
      - name: Run ESLint
        working-directory: backend/api
        run: npm run lint
        
      - name: Check formatting
        working-directory: backend/api
        run: npm run format:check
        
      - name: Type check
        working-directory: backend/api
        run: npm run type-check

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cookcam_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/api/package-lock.json
          
      - name: Install dependencies
        working-directory: backend/api
        run: npm ci
        
      - name: Create test env file
        working-directory: backend/api
        run: |
          cat > .env << EOF
          NODE_ENV=test
          PORT=3001
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/cookcam_test
          REDIS_URL=redis://localhost:6379/1
          OPENAI_API_KEY=test-api-key
          JWT_SECRET=test-jwt-secret
          JWT_REFRESH_SECRET=test-refresh-secret
          SUPABASE_URL=https://test.supabase.co
          SUPABASE_ANON_KEY=test-anon-key
          SUPABASE_SERVICE_ROLE_KEY=test-service-role-key
          DEMO_MODE=false
          ENABLE_SWAGGER=false
          LOG_LEVEL=error
          EOF
          
      - name: Run tests with coverage
        working-directory: backend/api
        run: npm run test:ci
        env:
          NODE_ENV: test
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/api/coverage/lcov.info
          flags: backend
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  test-mobile:
    name: Test Mobile App
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/CookCam/package-lock.json
          
      - name: Install dependencies
        working-directory: mobile/CookCam
        run: npm ci --legacy-peer-deps
        
      - name: Run TypeScript check
        working-directory: mobile/CookCam
        run: npm run check-ts
        
      - name: Run tests
        working-directory: mobile/CookCam
        run: npm test -- --passWithNoTests
        env:
          NODE_ENV: test

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [test-backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/api/package-lock.json
          
      - name: Install dependencies
        working-directory: backend/api
        run: npm ci
        
      - name: Build TypeScript
        working-directory: backend/api
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/api/dist/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Display Trivy scan results (for PRs from forks)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository
        run: |
          echo "Security scan results (not uploaded due to fork PR limitations):"
          if [ -f trivy-results.sarif ]; then
            cat trivy-results.sarif | jq '.runs[0].results[] | {ruleId: .ruleId, message: .message.text, severity: .level}' || echo "Could not parse SARIF file"
          else
            echo "No SARIF file found"
          fi
        continue-on-error: true
          
      - name: Run npm audit on backend
        working-directory: backend/api
        run: npm audit --production
        continue-on-error: true
        
      - name: Run npm audit on mobile
        working-directory: mobile/CookCam
        run: npm audit --production
        continue-on-error: true