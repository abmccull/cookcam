name: Deploy Backend to Production

on:
  push:
    branches: [ main ]
    paths: 
      - 'backend/api/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch: # Allow manual triggering
    inputs:
      run_usda_seeding:
        description: 'Run USDA seeding after deployment'
        required: false
        default: false
        type: boolean
      usda_seeding_type:
        description: 'Type of USDA seeding to run'
        required: false
        default: 'complete'
        type: choice
        options:
          - complete
          - resume
          - status

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Fetch at least 2 commits for comparison
      
    - name: Debug environment
      run: |
        echo "🔍 Debug Info:"
        echo "GitHub Actor: ${{ github.actor }}"
        echo "Event name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "SHA: ${{ github.sha }}"
        echo "Changed files:"
        # Handle case where HEAD~1 might not exist (initial commit or shallow clone)
        git diff --name-only HEAD~1 HEAD 2>/dev/null || \
        echo "Unable to show diff (likely initial commit or shallow clone)"
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/api/package-lock.json
        
    - name: Install dependencies
      run: |
        cd backend/api
        npm ci
        echo "✅ Dependencies installed"
        
    - name: Run linting
      run: |
        cd backend/api
        npm run lint 2>/dev/null || echo "⚠️  No linting configured"
        
    - name: Run tests
      run: |
        cd backend/api
        npm test 2>/dev/null || echo "⚠️  No tests configured yet"
        
    - name: Build TypeScript
      run: |
        cd backend/api
        echo "🔨 Building TypeScript..."
        
        # Debug environment
        echo "🔍 Environment Debug:"
        echo "Node version: $(node --version)"
        echo "npm version: $(npm --version)"
        echo "TypeScript version: $(npx tsc --version)"
        echo "Current directory: $(pwd)"
        echo "📁 Source directory contents:"
        ls -la src/
        echo "📄 TypeScript config:"
        cat tsconfig.json
        
        # Clean previous build
        rm -rf dist
        echo "🧹 Cleaned previous build directory"
        
        # Build with error handling
        echo "🔨 Running TypeScript build..."
        npx tsc || {
          echo "❌ TypeScript compilation failed!"
          echo "🔍 Checking for errors..."
          npx tsc --noEmit --listFiles | head -20
          exit 1
        }
        echo "✅ TypeScript build completed"
        
        # Verify critical files exist
        echo "🔍 Post-build verification:"
        echo "📁 Checking if dist directory exists:"
        ls -la . | grep dist || echo "No dist directory found"
        
        if [ -d "dist" ]; then
          echo "📁 dist/ directory contents:"
          ls -la dist/
        else
          echo "❌ dist/ directory was not created"
          exit 1
        fi
        
        if [ ! -f "dist/index.js" ]; then
          echo "❌ Build failed: dist/index.js not found"
          echo "🔍 Searching for any .js files in dist:"
          find dist -name "*.js" -type f 2>/dev/null || echo "No .js files found in dist"
          echo "🔍 Full dist tree:"
          find dist -type f 2>/dev/null || echo "dist directory is empty"
          exit 1
        fi
        
        echo "✅ Build artifact verified: dist/index.js exists"
        echo "📊 File size: $(du -h dist/index.js)"
        
        # Verify authentication fixes are included
        if grep -q "createAuthenticatedClient" dist/index.js; then
          echo "✅ Authentication fixes included in build"
        else
          echo "⚠️  Authentication fixes not found in build - checking source"
          grep -r "createAuthenticatedClient" src/ || echo "❌ Authentication fixes missing from source"
        fi
        
        echo "📁 Build directory contents:"
        ls -la dist/
        
    - name: Test SSH Connection
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: 22
        script: |
          echo "✅ SSH Connection successful!"
          echo "Current directory: $(pwd)"
          echo "Server time: $(date)"
          echo "Target directory: /var/www/cookcam-api"
          echo "Disk space: $(df -h /var/www/cookcam-api 2>/dev/null || echo 'Directory not found')"
          echo "PM2 status:"
          pm2 status cookcam-api || echo "PM2 process not found"
        
    - name: Prepare deployment files
      run: |
        cd backend/api
        echo "📦 Creating deployment package..."
        
        # Verify dist/index.js exists before packaging
        if [ ! -f "dist/index.js" ]; then
          echo "❌ Critical error: dist/index.js not found before packaging"
          echo "📁 Current directory contents:"
          ls -la
          echo "📁 dist/ directory contents:"
          ls -la dist/ 2>/dev/null || echo "dist/ directory doesn't exist"
          exit 1
        fi
        
        # Create deployment package with built files and dependencies
        tar -czf deployment.tar.gz \
          --exclude=node_modules \
          --exclude=test-images \
          --exclude='*.backup.*' \
          --exclude=coverage \
          --exclude=.nyc_output \
          --exclude='.env*' \
          --exclude=src \
          dist/ package*.json ecosystem.config.js 2>/dev/null || \
        tar -czf deployment.tar.gz \
          --exclude=node_modules \
          --exclude=test-images \
          --exclude='*.backup.*' \
          --exclude=coverage \
          --exclude=.nyc_output \
          --exclude='.env*' \
          --exclude=src \
          dist/ package*.json
          
        # Verify the build artifact is in the archive
        echo "🔍 Verifying package contents..."
        tar -tzf deployment.tar.gz | grep dist/index.js || (echo "❌ dist/index.js not in package!" && exit 1)
        echo "✅ Build artifact verified in package"
        
        echo "📋 Package contents:"
        tar -tzf deployment.tar.gz | head -20
        
        ls -la deployment.tar.gz
        echo "✅ Deployment package created ($(du -h deployment.tar.gz | cut -f1))"
        
    - name: Upload deployment package
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: 22
        source: "backend/api/deployment.tar.gz"
        target: "/tmp/"
        
    - name: Complete deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: 22
        script: |
          set -e
          echo "🚀 Starting deployment process..."
          
          # Ensure target directory exists
          mkdir -p /var/www/cookcam-api
          cd /var/www/cookcam-api
          
          # Create backup with timestamp
          BACKUP_DIR="backup_$(date +%Y%m%d_%H%M%S)"
          if [ -d "dist" ]; then
            cp -r dist "$BACKUP_DIR"
            echo "✅ Backup created: $BACKUP_DIR"
          fi
          
          # Stop the service before deployment
          echo "🛑 Stopping current service..."
          pm2 stop cookcam-api || echo "Service not running"
          
          # Extract new files
          echo "📂 Extracting deployment package..."
          tar -xzf /tmp/backend/api/deployment.tar.gz
          echo "✅ Files extracted successfully"
          
          # Debug: Verify extraction was successful
          echo "🔍 Verifying extraction..."
          echo "📁 Current directory: $(pwd)"
          echo "📁 Directory contents:"
          ls -la
          echo "📁 dist/ directory contents:"
          ls -la dist/ 2>/dev/null || echo "❌ dist/ directory not found after extraction"
          
          if [ -f "dist/index.js" ]; then
            echo "✅ dist/index.js found after extraction"
            echo "📊 File size: $(du -h dist/index.js)"
          else
            echo "❌ CRITICAL: dist/index.js not found after extraction"
            echo "📁 Searching for index.js files:"
            find . -name "index.js" -type f 2>/dev/null || echo "No index.js files found"
            exit 1
          fi
          
          # Ensure Node.js and npm are available
          echo "🔧 Checking Node.js and npm installation..."
          if ! command -v node &> /dev/null; then
            echo "📥 Installing Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
            apt-get install -y nodejs
          fi
          
          echo "📋 Node.js version: $(node --version)"
          echo "📋 npm version: $(npm --version)"
          
          # Install/update dependencies
          echo "📦 Installing dependencies..."
          npm ci --production
          echo "✅ Dependencies installed"
          
          # Verify the build contains our fixes
          if grep -q "createAuthenticatedClient" dist/index.js; then
            echo "✅ Authentication fixes verified in deployed code"
          else
            echo "⚠️  Authentication fixes not found in deployed code"
          fi
          
          # Verify critical files
          if [ ! -f "dist/index.js" ]; then
            echo "❌ Critical error: dist/index.js not found after extraction"
            echo "📁 Current directory contents:"
            ls -la
            exit 1
          fi
          
          # Start the service
          echo "🚀 Starting service..."
          pm2 start dist/index.js --name cookcam-api --update-env || pm2 restart cookcam-api
          
          # Wait for service to stabilize
          echo "⏳ Waiting for service to start..."
          sleep 10
          
          # Verify deployment with health check
          echo "🔍 Verifying deployment..."
          HEALTH_CHECK=$(curl -f -s http://localhost:3000/health || echo "FAILED")
          
          if echo "$HEALTH_CHECK" | grep -q "healthy\|ok\|success"; then
            echo "✅ Deployment successful! Health check passed."
            echo "📊 PM2 Status:"
            pm2 status
            
            # Clean up
            rm -f /tmp/backend/api/deployment.tar.gz
            
            # Keep only last 5 backups
            ls -t backup_* 2>/dev/null | tail -n +6 | xargs rm -rf || true
            echo "🧹 Cleanup completed"
            
          else
            echo "❌ Health check failed!"
            echo "🔄 Rolling back to previous version..."
            
            # Rollback to backup if available
            if [ -d "$BACKUP_DIR" ]; then
              rm -rf dist
              mv "$BACKUP_DIR" dist
              pm2 restart cookcam-api
              echo "🔄 Rollback completed"
            fi
            
            echo "📊 PM2 Status after rollback:"
            pm2 status
            echo "📝 Recent logs:"
            pm2 logs cookcam-api --lines 30 || true
            
            exit 1
          fi
          
    - name: Post-deployment verification
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: 22
        script: |
          echo "🔍 Post-deployment verification..."
          
          # Check if authentication fixes are working
          echo "Checking authentication implementation..."
          if grep -q "createAuthenticatedClient" /var/www/cookcam-api/dist/index.js; then
            echo "✅ Authentication fixes deployed successfully"
          else
            echo "❌ Authentication fixes missing from deployment"
          fi
          
          # Check PM2 status
          echo "📊 Final PM2 status:"
          pm2 status cookcam-api
          
          # Show recent logs to verify no immediate errors
          echo "📝 Recent application logs:"
          pm2 logs cookcam-api --lines 10 --nostream
          
    - name: Notify USDA seeding trigger
      if: ${{ success() && inputs.run_usda_seeding }}
      run: |
        echo "🌱 USDA seeding will be triggered after deployment"
        echo "📊 Seeding type: ${{ inputs.usda_seeding_type || 'complete' }}"
        echo "🔧 This will be handled by a separate workflow run"
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "🎉 Backend deployment completed successfully!"
          echo "✅ Authentication fixes have been deployed to production"
          echo "🔗 The 'Cooking session not found' errors should now be resolved"
          
          if [ "${{ inputs.run_usda_seeding }}" = "true" ]; then
            echo "🌱 USDA seeding has been triggered"
            echo "📊 Check the USDA Database Seeding workflow for progress"
            echo "⏰ Note: USDA seeding can take several days to complete"
          fi
        else
          echo "💥 Backend deployment failed!"
          echo "❌ Please check the logs above for details"
          echo "🔄 Consider running the workflow again or investigating the issue"
        fi

  # USDA Seeding Job (runs after successful deployment if requested)
  usda-seeding:
    needs: deploy
    if: ${{ success() && inputs.run_usda_seeding }}
    uses: ./.github/workflows/usda-seeding.yml
    with:
      seeding_type: ${{ inputs.usda_seeding_type || 'complete' }}
      environment: 'production'
    secrets: inherit 